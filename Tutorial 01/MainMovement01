
// Code created by RandomGameDev
// Base movement by sharpcoderblog.com
//credit is always appreciated


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MainMovement01 : MonoBehaviour

{
    private Vector3 moveVector;
   public float walkingSpeed = 7.5f;
    public float runningSpeed = 70.5f;
     public Camera playerCamera;
    public float jumpSpeed = 8.0f;
    public float gravity = 20.0f;
    public CharacterController characterController;
    Vector3 moveDirection = Vector3.zero;
    float rotationX = 0;
     public float lookSpeed = 2.0f;
    public float lookXLimit = 60.0f;
    Vector2 rotation = Vector2.zero;
    private bool isGrounded;

    [HideInInspector]
    public bool canMove = true;
    

    private float canJump = 0f;

        void OnControllerColliderHit(ControllerColliderHit hit)
        {
            if (!characterController.isGrounded && hit.normal.y < 0.7f && hit.collider.gameObject.tag == "Wall")
            {
                if (Input.GetButtonDown("Jump") && Time.time > canJump)
                {
                    Debug.DrawRay(hit.point,hit.normal, Color.red, 7f);
                    moveDirection.y = jumpSpeed;
                    gravity = 10f;
                    moveVector = hit.normal * walkingSpeed;
                    canJump = Time.time + 1f;
                }

            }
            else
            {
                gravity = 20f;
            }
        }

    void Start()
    {
        characterController = GetComponent<CharacterController>();
        // Lock cursor
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    void Update()
    {


        //Run, idle, walk and crouch

        if (Input.GetKey("left ctrl"))
        {
            characterController.height = 1.0f;
            walkingSpeed = 3.75f;
            runningSpeed = 0f;
        }
        else
        {
            characterController.height = 2.0f;
            walkingSpeed = 7.5f;
            runningSpeed = 11.5f;
        }


        

       // We are grounded, so recalculate move direction based on axes
        Vector3 forward = transform.TransformDirection(Vector3.forward);
        Vector3 right = transform.TransformDirection(Vector3.right);
        // Press Left Shift to run
        bool isRunning = Input.GetKey(KeyCode.LeftShift);
        float curSpeedX = canMove ? (isRunning ? runningSpeed : walkingSpeed) * Input.GetAxis("Vertical") : 0;
        float curSpeedY = canMove ? (isRunning ? runningSpeed : walkingSpeed) * Input.GetAxis("Horizontal") : 0;
        float movementDirectionY = moveDirection.y;
        moveDirection = (forward * curSpeedX) + (right * curSpeedY);

        if (Input.GetButton("Jump") && canMove && characterController.isGrounded)
        {
            moveDirection.y = jumpSpeed;
        }
        else
        {
            moveDirection.y = movementDirectionY;
        }

        // Apply gravity. Gravity is multiplied by deltaTime twice (once here, and once below
        // when the moveDirection is multiplied by deltaTime). This is because gravity should be applied
        // as an acceleration (ms^-2)
        if (!characterController.isGrounded)
        {
            moveDirection.y -= gravity * Time.deltaTime;
        }

        // Move the controller
        characterController.Move(moveDirection * Time.deltaTime);

        // Player and Camera rotation
        if (canMove)
        {
            rotationX += -Input.GetAxis("Mouse Y") * lookSpeed;
            rotationX = Mathf.Clamp(rotationX, -lookXLimit, lookXLimit);
            playerCamera.transform.localRotation = Quaternion.Euler(rotationX, 0, 0);
            transform.rotation *= Quaternion.Euler(0, Input.GetAxis("Mouse X") * lookSpeed, 0);
        }
    }
}
